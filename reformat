#!/usr/bin/env node

function reformat(data, cb) {
  var csv = require('csv');
  data = data.replace(/^\s*[\r\n]$/gm, '');
  var lines = data.split(/\r?\n/)
    , headers = []
  while (lines[0][0] == '*') headers.push(lines.shift());
  var columns = lines.shift().split('\t');

  csv.parse(lines.join('\n'), { delimiter: '\t', columns: columns }, function(err, data) {
    if (err) throw err;
    data = data.filter(function(r) { return r['Ignore'] != 'yes'; });
    data = data.map(function(r) {
      r['Text 2'] = r['Text 2'].replace(/^\(han\/hon\/den\/det\)/, '<color grey>(han/hon/den/det)</color>');
      r['Text 2'] = r['Text 2'].replace(/^\(de\)/,              '<color grey>(de)</color>');
      r['Text 2'] = `<size 1>${r['Text 2']}</size><br><br>`
                  + `${r['Text 4']}<br><br>`
                  + `<size 0.75>${r['Text 3'].split('; ').join('<br>')}<br>`
                  + `<color grey>${r['Extra Info']}</color></size>`;
      delete r['Text 3'];
      delete r['Text 4'];
      delete r['Extra Info'];

      r['Sound 2'] = r['Sound 4']
      delete r['Sound 4'];
      return r;
    });

    var out = headers.join('\n') + '\n';
    out += Object.keys(data[0]).join('\t') + '\n'; // column names
    data.map(function(r) {
      out += Object.keys(r).map(function(k) { return r[k]; }).join('\t') + '\n';
    });
    return cb(out);
  });
}

if (process.argv.length > 2) {
  var fs = require('fs');
  reformat(fs.readFileSync(process.argv[2], 'utf-8'), function(out) {
    if (process.argv.length == 3) return process.stdout.write(out);
    fs.writeFileSync(process.argv[3], out);
  });
} else {
  var data = '';
  process.openStdin()
    .on('data', function(chunk) { data += chunk; })
    .on('end',  function()      { reformat(data, console.log); });
}
